// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zodiatic/lunar.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Lunar struct {
	Yyyymmdd     uint64   `protobuf:"varint,1,opt,name=yyyymmdd,proto3" json:"yyyymmdd,omitempty"`
	Date         string   `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	LunarNumber  []uint64 `protobuf:"varint,3,rep,packed,name=lunarNumber,proto3" json:"lunarNumber,omitempty"`
	Lunar        string   `protobuf:"bytes,4,opt,name=lunar,proto3" json:"lunar,omitempty"`
	EightWords   string   `protobuf:"bytes,5,opt,name=eightWords,proto3" json:"eightWords,omitempty"`
	GodDirection string   `protobuf:"bytes,6,opt,name=godDirection,proto3" json:"godDirection,omitempty"`
	GoodFor      string   `protobuf:"bytes,7,opt,name=goodFor,proto3" json:"goodFor,omitempty"`
	BadFor       string   `protobuf:"bytes,8,opt,name=badFor,proto3" json:"badFor,omitempty"`
	Creator      string   `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Lunar) Reset()         { *m = Lunar{} }
func (m *Lunar) String() string { return proto.CompactTextString(m) }
func (*Lunar) ProtoMessage()    {}
func (*Lunar) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4360df22450cc7a, []int{0}
}
func (m *Lunar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lunar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lunar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lunar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lunar.Merge(m, src)
}
func (m *Lunar) XXX_Size() int {
	return m.Size()
}
func (m *Lunar) XXX_DiscardUnknown() {
	xxx_messageInfo_Lunar.DiscardUnknown(m)
}

var xxx_messageInfo_Lunar proto.InternalMessageInfo

func (m *Lunar) GetYyyymmdd() uint64 {
	if m != nil {
		return m.Yyyymmdd
	}
	return 0
}

func (m *Lunar) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Lunar) GetLunarNumber() []uint64 {
	if m != nil {
		return m.LunarNumber
	}
	return nil
}

func (m *Lunar) GetLunar() string {
	if m != nil {
		return m.Lunar
	}
	return ""
}

func (m *Lunar) GetEightWords() string {
	if m != nil {
		return m.EightWords
	}
	return ""
}

func (m *Lunar) GetGodDirection() string {
	if m != nil {
		return m.GodDirection
	}
	return ""
}

func (m *Lunar) GetGoodFor() string {
	if m != nil {
		return m.GoodFor
	}
	return ""
}

func (m *Lunar) GetBadFor() string {
	if m != nil {
		return m.BadFor
	}
	return ""
}

func (m *Lunar) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Lunar)(nil), "zodiatic.zodiatic.zodiatic.Lunar")
}

func init() { proto.RegisterFile("zodiatic/lunar.proto", fileDescriptor_a4360df22450cc7a) }

var fileDescriptor_a4360df22450cc7a = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xbb, 0x36, 0x49, 0xdb, 0xd1, 0xd3, 0x52, 0x64, 0xe9, 0x61, 0x09, 0x3d, 0xe5, 0x62,
	0x7a, 0xf0, 0x1f, 0x88, 0xe8, 0x45, 0x3c, 0xe4, 0x22, 0x78, 0x4b, 0xb2, 0x4b, 0xba, 0x60, 0x3a,
	0x65, 0xbb, 0x01, 0xd7, 0x5f, 0xe1, 0xcf, 0xf2, 0xd8, 0xa3, 0x47, 0x49, 0x7e, 0x88, 0xd2, 0x69,
	0x1b, 0x2b, 0xde, 0xde, 0xf7, 0xde, 0x3c, 0x06, 0x1e, 0x4c, 0xdf, 0x50, 0x99, 0xdc, 0x99, 0x72,
	0xf1, 0xd2, 0xac, 0x72, 0x9b, 0xae, 0x2d, 0x3a, 0xe4, 0xb3, 0xa3, 0x9b, 0xfe, 0x13, 0xf3, 0x6f,
	0x06, 0xe1, 0xc3, 0xee, 0x96, 0xcf, 0x60, 0xec, 0xbd, 0xf7, 0x75, 0xad, 0x94, 0x60, 0x31, 0x4b,
	0x82, 0xac, 0x67, 0xce, 0x21, 0x50, 0xb9, 0xd3, 0xe2, 0x2c, 0x66, 0xc9, 0x24, 0x23, 0xcd, 0x63,
	0x38, 0xa7, 0x27, 0x8f, 0x4d, 0x5d, 0x68, 0x2b, 0x86, 0xf1, 0x30, 0x09, 0xb2, 0x53, 0x8b, 0x4f,
	0x21, 0x24, 0x14, 0x01, 0xd5, 0xf6, 0xc0, 0x25, 0x80, 0x36, 0xd5, 0xd2, 0x3d, 0xa1, 0x55, 0x1b,
	0x11, 0x52, 0x74, 0xe2, 0xf0, 0x39, 0x5c, 0x54, 0xa8, 0x6e, 0x8d, 0xd5, 0xa5, 0x33, 0xb8, 0x12,
	0x11, 0x5d, 0xfc, 0xf1, 0xb8, 0x80, 0x51, 0x85, 0xa8, 0xee, 0xd0, 0x8a, 0x11, 0xc5, 0x47, 0xe4,
	0x97, 0x10, 0x15, 0x39, 0x05, 0x63, 0x0a, 0x0e, 0xb4, 0x6b, 0x94, 0x56, 0xe7, 0x0e, 0xad, 0x98,
	0xec, 0x1b, 0x07, 0xbc, 0xb9, 0xff, 0x68, 0x25, 0xdb, 0xb6, 0x92, 0x7d, 0xb5, 0x92, 0xbd, 0x77,
	0x72, 0xb0, 0xed, 0xe4, 0xe0, 0xb3, 0x93, 0x83, 0xe7, 0xab, 0xca, 0xb8, 0x65, 0x53, 0xa4, 0x25,
	0xd6, 0x8b, 0x7e, 0xd8, 0x5e, 0xbc, 0xfe, 0x4a, 0xe7, 0xd7, 0x7a, 0x53, 0x44, 0xb4, 0xf6, 0xf5,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x34, 0xdf, 0x4b, 0x85, 0x01, 0x00, 0x00,
}

func (m *Lunar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lunar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lunar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BadFor) > 0 {
		i -= len(m.BadFor)
		copy(dAtA[i:], m.BadFor)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.BadFor)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GoodFor) > 0 {
		i -= len(m.GoodFor)
		copy(dAtA[i:], m.GoodFor)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.GoodFor)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GodDirection) > 0 {
		i -= len(m.GodDirection)
		copy(dAtA[i:], m.GodDirection)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.GodDirection)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EightWords) > 0 {
		i -= len(m.EightWords)
		copy(dAtA[i:], m.EightWords)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.EightWords)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Lunar) > 0 {
		i -= len(m.Lunar)
		copy(dAtA[i:], m.Lunar)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.Lunar)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LunarNumber) > 0 {
		dAtA2 := make([]byte, len(m.LunarNumber)*10)
		var j1 int
		for _, num := range m.LunarNumber {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintLunar(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0x12
	}
	if m.Yyyymmdd != 0 {
		i = encodeVarintLunar(dAtA, i, uint64(m.Yyyymmdd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLunar(dAtA []byte, offset int, v uint64) int {
	offset -= sovLunar(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Lunar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Yyyymmdd != 0 {
		n += 1 + sovLunar(uint64(m.Yyyymmdd))
	}
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	if len(m.LunarNumber) > 0 {
		l = 0
		for _, e := range m.LunarNumber {
			l += sovLunar(uint64(e))
		}
		n += 1 + sovLunar(uint64(l)) + l
	}
	l = len(m.Lunar)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	l = len(m.EightWords)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	l = len(m.GodDirection)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	l = len(m.GoodFor)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	l = len(m.BadFor)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	return n
}

func sovLunar(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLunar(x uint64) (n int) {
	return sovLunar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Lunar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLunar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lunar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lunar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yyyymmdd", wireType)
			}
			m.Yyyymmdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Yyyymmdd |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLunar
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LunarNumber = append(m.LunarNumber, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLunar
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLunar
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLunar
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LunarNumber) == 0 {
					m.LunarNumber = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLunar
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LunarNumber = append(m.LunarNumber, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LunarNumber", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lunar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lunar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EightWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EightWords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GodDirection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GodDirection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodFor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadFor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLunar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLunar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLunar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLunar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLunar
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLunar
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLunar
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLunar        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLunar          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLunar = fmt.Errorf("proto: unexpected end of group")
)
